/* tslint:disable */
/* eslint-disable */
/**
 * Orion Chamber Admin API
 * Admin-only endpoints for system management
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateTeamDto } from '../models';
// @ts-ignore
import type { CreateTeamResponseDto } from '../models';
// @ts-ignore
import type { DeleteTeamResponseDto } from '../models';
// @ts-ignore
import type { GetAllTeamsResponseDto } from '../models';
// @ts-ignore
import type { UpdateTeamAsAdminResponseDto } from '../models';
// @ts-ignore
import type { UpdateTeamDto } from '../models';
/**
 * AdminTeamsApi - axios parameter creator
 * @export
 */
export const AdminTeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Admin teams endpoints test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/teams/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new team (Admin only)
         * @param {CreateTeamDto} createTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: async (createTeamDto: CreateTeamDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTeamDto' is not null or undefined
            assertParamExists('createTeam', 'createTeamDto', createTeamDto)
            const localVarPath = `/api/v1/admin/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTeamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete team (Admin only)
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: async (teamId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteTeam', 'teamId', teamId)
            const localVarPath = `/api/v1/admin/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all teams (Admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update team as admin
         * @param {string} teamId 
         * @param {UpdateTeamDto} updateTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamAsAdmin: async (teamId: string, updateTeamDto: UpdateTeamDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateTeamAsAdmin', 'teamId', teamId)
            // verify required parameter 'updateTeamDto' is not null or undefined
            assertParamExists('updateTeamAsAdmin', 'updateTeamDto', updateTeamDto)
            const localVarPath = `/api/v1/admin/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTeamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminTeamsApi - functional programming interface
 * @export
 */
export const AdminTeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminTeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Admin teams endpoints test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminTeamsTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminTeamsTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminTeamsApi.adminTeamsTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new team (Admin only)
         * @param {CreateTeamDto} createTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeam(createTeamDto: CreateTeamDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTeamResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeam(createTeamDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminTeamsApi.createTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete team (Admin only)
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeam(teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteTeamResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(teamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminTeamsApi.deleteTeam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all teams (Admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTeams(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTeamsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTeams(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminTeamsApi.getAllTeams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update team as admin
         * @param {string} teamId 
         * @param {UpdateTeamDto} updateTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeamAsAdmin(teamId: string, updateTeamDto: UpdateTeamDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateTeamAsAdminResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeamAsAdmin(teamId, updateTeamDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminTeamsApi.updateTeamAsAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminTeamsApi - factory interface
 * @export
 */
export const AdminTeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminTeamsApiFp(configuration)
    return {
        /**
         * 
         * @summary Admin teams endpoints test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminTeamsTest(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminTeamsTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new team (Admin only)
         * @param {CreateTeamDto} createTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(createTeamDto: CreateTeamDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateTeamResponseDto> {
            return localVarFp.createTeam(createTeamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete team (Admin only)
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(teamId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteTeamResponseDto> {
            return localVarFp.deleteTeam(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all teams (Admin only)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams(options?: RawAxiosRequestConfig): AxiosPromise<GetAllTeamsResponseDto> {
            return localVarFp.getAllTeams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update team as admin
         * @param {string} teamId 
         * @param {UpdateTeamDto} updateTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamAsAdmin(teamId: string, updateTeamDto: UpdateTeamDto, options?: RawAxiosRequestConfig): AxiosPromise<UpdateTeamAsAdminResponseDto> {
            return localVarFp.updateTeamAsAdmin(teamId, updateTeamDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminTeamsApi - object-oriented interface
 * @export
 * @class AdminTeamsApi
 * @extends {BaseAPI}
 */
export class AdminTeamsApi extends BaseAPI {
    /**
     * 
     * @summary Admin teams endpoints test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public adminTeamsTest(options?: RawAxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).adminTeamsTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new team (Admin only)
     * @param {CreateTeamDto} createTeamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public createTeam(createTeamDto: CreateTeamDto, options?: RawAxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).createTeam(createTeamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete team (Admin only)
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public deleteTeam(teamId: string, options?: RawAxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).deleteTeam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all teams (Admin only)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public getAllTeams(options?: RawAxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).getAllTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update team as admin
     * @param {string} teamId 
     * @param {UpdateTeamDto} updateTeamDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminTeamsApi
     */
    public updateTeamAsAdmin(teamId: string, updateTeamDto: UpdateTeamDto, options?: RawAxiosRequestConfig) {
        return AdminTeamsApiFp(this.configuration).updateTeamAsAdmin(teamId, updateTeamDto, options).then((request) => request(this.axios, this.basePath));
    }
}

