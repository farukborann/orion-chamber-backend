/* tslint:disable */
/* eslint-disable */
/**
 * Orion Chamber User API
 * User endpoints for regular operations
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateVtonProcessDto } from '../models';
// @ts-ignore
import type { GarmentTypeDetectionDto } from '../models';
// @ts-ignore
import type { GarmentTypeResponseDto } from '../models';
// @ts-ignore
import type { VtonProcessResponseDto } from '../models';
/**
 * VtonApi - axios parameter creator
 * @export
 */
export const VtonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new VTON process
         * @param {CreateVtonProcessDto} createVtonProcessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVtonProcess: async (createVtonProcessDto: CreateVtonProcessDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVtonProcessDto' is not null or undefined
            assertParamExists('createVtonProcess', 'createVtonProcessDto', createVtonProcessDto)
            const localVarPath = `/api/v1/vton/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVtonProcessDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detect garment type from base64 image (Frontend use)
         * @param {GarmentTypeDetectionDto} garmentTypeDetectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectGarmentType: async (garmentTypeDetectionDto: GarmentTypeDetectionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'garmentTypeDetectionDto' is not null or undefined
            assertParamExists('detectGarmentType', 'garmentTypeDetectionDto', garmentTypeDetectionDto)
            const localVarPath = `/api/v1/vton/detect-garment-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(garmentTypeDetectionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user\'s VTON processes
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVtonProcesses: async (teamId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getUserVtonProcesses', 'teamId', teamId)
            const localVarPath = `/api/v1/vton/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get VTON process status by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVtonProcessStatus: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVtonProcessStatus', 'id', id)
            const localVarPath = `/api/v1/vton/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VtonApi - functional programming interface
 * @export
 */
export const VtonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VtonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new VTON process
         * @param {CreateVtonProcessDto} createVtonProcessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVtonProcess(createVtonProcessDto: CreateVtonProcessDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VtonProcessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVtonProcess(createVtonProcessDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VtonApi.createVtonProcess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Detect garment type from base64 image (Frontend use)
         * @param {GarmentTypeDetectionDto} garmentTypeDetectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detectGarmentType(garmentTypeDetectionDto: GarmentTypeDetectionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GarmentTypeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detectGarmentType(garmentTypeDetectionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VtonApi.detectGarmentType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user\'s VTON processes
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserVtonProcesses(teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VtonProcessResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserVtonProcesses(teamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VtonApi.getUserVtonProcesses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get VTON process status by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVtonProcessStatus(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VtonProcessResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVtonProcessStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VtonApi.getVtonProcessStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VtonApi - factory interface
 * @export
 */
export const VtonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VtonApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new VTON process
         * @param {CreateVtonProcessDto} createVtonProcessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVtonProcess(createVtonProcessDto: CreateVtonProcessDto, options?: RawAxiosRequestConfig): AxiosPromise<VtonProcessResponseDto> {
            return localVarFp.createVtonProcess(createVtonProcessDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detect garment type from base64 image (Frontend use)
         * @param {GarmentTypeDetectionDto} garmentTypeDetectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectGarmentType(garmentTypeDetectionDto: GarmentTypeDetectionDto, options?: RawAxiosRequestConfig): AxiosPromise<GarmentTypeResponseDto> {
            return localVarFp.detectGarmentType(garmentTypeDetectionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user\'s VTON processes
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVtonProcesses(teamId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<VtonProcessResponseDto>> {
            return localVarFp.getUserVtonProcesses(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get VTON process status by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVtonProcessStatus(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VtonProcessResponseDto> {
            return localVarFp.getVtonProcessStatus(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VtonApi - object-oriented interface
 * @export
 * @class VtonApi
 * @extends {BaseAPI}
 */
export class VtonApi extends BaseAPI {
    /**
     * 
     * @summary Create a new VTON process
     * @param {CreateVtonProcessDto} createVtonProcessDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VtonApi
     */
    public createVtonProcess(createVtonProcessDto: CreateVtonProcessDto, options?: RawAxiosRequestConfig) {
        return VtonApiFp(this.configuration).createVtonProcess(createVtonProcessDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detect garment type from base64 image (Frontend use)
     * @param {GarmentTypeDetectionDto} garmentTypeDetectionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VtonApi
     */
    public detectGarmentType(garmentTypeDetectionDto: GarmentTypeDetectionDto, options?: RawAxiosRequestConfig) {
        return VtonApiFp(this.configuration).detectGarmentType(garmentTypeDetectionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user\'s VTON processes
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VtonApi
     */
    public getUserVtonProcesses(teamId: string, options?: RawAxiosRequestConfig) {
        return VtonApiFp(this.configuration).getUserVtonProcesses(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get VTON process status by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VtonApi
     */
    public getVtonProcessStatus(id: string, options?: RawAxiosRequestConfig) {
        return VtonApiFp(this.configuration).getVtonProcessStatus(id, options).then((request) => request(this.axios, this.basePath));
    }
}

